[{"path":"https://joshobrien.github.io/exiftoolr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua O'Brien. Author, maintainer.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"O'Brien J (2024). exiftoolr: ExifTool Functionality R. R package version 0.2.4, https://joshobrien.github.io/exiftoolr/, https://github.com/JoshOBrien/exiftoolr#readme.","code":"@Manual{,   title = {exiftoolr: ExifTool Functionality from R},   author = {Joshua O'Brien},   year = {2024},   note = {R package version 0.2.4, https://joshobrien.github.io/exiftoolr/},   url = {https://github.com/JoshOBrien/exiftoolr#readme}, }"},{"path":"https://joshobrien.github.io/exiftoolr/index.html","id":"exiftool-functionality-from-r","dir":"","previous_headings":"","what":"ExifTool Functionality from R","title":"ExifTool Functionality from R","text":"ExifTool comprehensive open source utility reading, writing editing meta information wide variety file types. noted project homepage: ExifTool supports many different metadata formats including EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, FlashPix, AFCP ID3, well maker notes many digital cameras Canon, Casio, DJI, FLIR, FujiFilm, GE, GoPro, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Motorola, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon Sony. exiftoolr wraps local installation ExifTool, giving users easy access functionality within R. exif_read() can used read metadata one many files data.frame one column per metadata field one row per file. exif_call(), supports general calls underlying ExifTool utility, examples displayed .","code":""},{"path":"https://joshobrien.github.io/exiftoolr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"ExifTool Functionality from R","text":"photo taken La Sal mountains southeastern Utah, USA.  Suppose like annotate bit text indicating time place photo taken. follows, using exiftoolr extract relevant data file, magick package annotate image:","code":"library(exiftoolr) library(magick)  ## Read and extract image metadata dat <- exif_read(\"LaSals.jpg\") DateTime  <- dat[[\"CreateDate\"]] Longitude <- dat[[\"GPSLongitude\"]] Latitude  <- dat[[\"GPSLatitude\"]]  ## Prepare annotation text txt <- paste0(DateTime, \"\\n\",               \"Longitude: \", round(Longitude, 5), \"\\n\",               \"Latitude:  \", round(Latitude, 5))  ## Annotate image and write to file out <- image_annotate(image_read(infile), txt,                       gravity = \"northwest\", color = \"red\",                       boxcolor = adjustcolor(\"black\", alpha=0.2),                       size = 15, location = \"+10+10\") image_write(out, \"LaSals_annotated.jpg\")"},{"path":"https://joshobrien.github.io/exiftoolr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ExifTool Functionality from R","text":"install exiftoolr CRAN , usual: install recent version GitHub, :","code":"install.packages(\"exiftoolr\") if(!require(devtools)) {install.packages(\"devtools\")} devtools::install_github(\"JoshOBrien/exiftoolr\")"},{"path":"https://joshobrien.github.io/exiftoolr/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"ExifTool Functionality from R","text":"exiftoolr can configured use existing ExifTool installation. Alternatively, run install_exiftool() following package installation install copy ExifTool package’s directory tree, calls functions exiftoolr package automatically find : exiftoolr makes reasonable attempt find local copies Perl ExifTool , cases, need hints find . direct control Perl ExifTool used, set paths either explicit call configure_exiftool() environment variables \"ET_PERL_PATH\" \"ET_EXIFTOOL_PATH\".","code":"exiftoolr::install_exiftool()"},{"path":"https://joshobrien.github.io/exiftoolr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"ExifTool Functionality from R","text":"exif_read() reads metadata one image files, returning results plain data.frame: extract tags actually needed, use tags argument: tags argument also accepts simple regular expressions. instance, extract fields names containing substring \"GPS\", use following call: access general ExifTool functionality (many examples shown ), use exif_call() function. example, call just , run using exif_call(), look something like :","code":"library(exiftoolr) image_files <- dir(system.file(\"images\", package = \"exiftoolr\"),                     full.names = TRUE) exifinfo <- exif_read(image_files) dim(exifinfo) #> [1]   3 181 names(exifinfo)[1:20] ## Display first 20 metadata fields read by ExifTool #>  [1] \"SourceFile\"        \"ExifToolVersion\"   \"FileName\"          \"Directory\"         #>  [5] \"FileSize\"          \"FileModifyDate\"    \"FileAccessDate\"    \"FileCreateDate\"    #>  [9] \"FilePermissions\"   \"FileType\"          \"FileTypeExtension\" \"MIMEType\"          #> [13] \"ExifByteOrder\"     \"Make\"              \"Model\"             \"Orientation\"       #> [17] \"XResolution\"       \"YResolution\"       \"ResolutionUnit\"    \"Software\" exif_read(image_files, tags = c(\"filename\", \"imagesize\")) #>                                   SourceFile     FileName ImageSize #> 1   C:/R/Library/exiftoolr/images/LaSals.jpg   LaSals.jpg   640 480 #> 2   C:/R/Library/exiftoolr/images/Lizard.jpg   Lizard.jpg 4032 3024 #> 3 C:/R/Library/exiftoolr/images/QS_Hongg.jpg QS_Hongg.jpg 4674 3456 exif_read(image_files[1], tags = \"*GPS*\") #>                                 SourceFile GPSLatitudeRef GPSLongitudeRef #> 1 C:/R/Library/exiftoolr/images/LaSals.jpg              N               W #>   GPSAltitudeRef GPSTimeStamp GPSSpeedRef GPSSpeed GPSImgDirectionRef #> 1              0     23:05:36           K        0                  T #>   GPSImgDirection GPSDestBearingRef GPSDestBearing GPSDateStamp GPSHPositioningError #> 1        107.2073                 T       107.2073   2016:09:21                    5 #>   GPSAltitude          GPSDateTime GPSLatitude GPSLongitude #> 1    2257.414 2016:09:21 23:05:36Z    39.64798    -111.3705 #>                          GPSPosition #> 1 39.6479805555556 -111.370505555556 exif_call(args = c(\"-n\", \"-j\", \"-q\", \"-*GPS*\"), path = image_files[1])"},{"path":"https://joshobrien.github.io/exiftoolr/index.html","id":"why-another-r-package-for-reading-image-file-metadata","dir":"","previous_headings":"","what":"Why another R package for reading image file metadata?","title":"ExifTool Functionality from R","text":"Several R packages can read EXIF metadata image files. exif magick packages include functions (exif::read_exif(), magick::image_attributes(), respectively) extract files’ EXIF data. Often, though, EXIF tags comprise subset metadata file. Despite name, ExifTool reads data stored many additional metadata formats. exifr package – also thin wrapper around ExifTool – much similar functionality provides. packages differ mainly support easy installation configuration operating systems. exiftoolr, particular, designed make easy Windows users – even without Perl installations – access ExifTool functionality *NIX Mac users. Relative exifr, exiftoolr also makes easier update ExifTool current version.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/configure_exiftoolr.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure package to point to ExifTool and/or Perl — configure_exiftoolr","title":"Configure package to point to ExifTool and/or Perl — configure_exiftoolr","text":"Configure package point ExifTool /Perl","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/configure_exiftoolr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure package to point to ExifTool and/or Perl — configure_exiftoolr","text":"","code":"configure_exiftoolr(   command = NULL,   perl_path = NULL,   allow_win_exe = TRUE,   quiet = FALSE )"},{"path":"https://joshobrien.github.io/exiftoolr/reference/configure_exiftoolr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure package to point to ExifTool and/or Perl — configure_exiftoolr","text":"command Character string giving exiftool command. perl_path Path Perl executable. allow_win_exe Logical. running Windows machine, standalone exiftool executable available, used? quiet Logical. function chatty?","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/configure_exiftoolr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure package to point to ExifTool and/or Perl — configure_exiftoolr","text":"character string giving exiftool command, returned     invisibly.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Call ExifTool from R — exif_call","title":"Call ExifTool from R — exif_call","text":"Uses system2() run basic call exiftool.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call ExifTool from R — exif_call","text":"","code":"exif_call(   args = NULL,   path = NULL,   stdout = TRUE,   quiet = FALSE,   ...,   config_file = NULL,   common_args = NULL )  exif_version(quiet = TRUE)"},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call ExifTool from R — exif_call","text":"args Character vector arguments, written form writing command line (e.g. \"-n\" \"-csv\") path character vector giving one file paths. stdout output stdout sent. TRUE (default), output captured character vector. options, see help file system2, function argument's value gets passed along. quiet Use FALSE display diagnostic information. Default value FALSE. ... Additional arguments passed system2(). config_file Path config file format expected Exiftool's command line -config option. (See Details explanation one option passed directly args via -config argument.) common_args character vector arguments applied executed commands Exiftool -execute option used. (See Details explanation option passed directly args via -common_args argument.)","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call ExifTool from R — exif_call","text":"standard output character vector.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_call.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call ExifTool from R — exif_call","text":"examples command-line calls ExifTool (    can reproduced calls exif_call), see     https://exiftool.org/examples.html. hood, exif_call() writes options     args text file calls Exiftool, passing     text file's contents Exiftool via -@     ARGFILE option. -config -common_args     two options may used -@     ARGFILE, handle option separately using     exif_call()'s config_file argument.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call ExifTool from R — exif_call","text":"","code":"if (FALSE) { ## Find local ExifTool version using exif_version() or exif_call() exif_version() exif_call(args = \"-ver\")  ## Make temporary copies of a couple jpeg files tmpdir <- tempdir() src_files <- dir(system.file(package = \"exiftoolr\", \"images\"),                  full.names = TRUE) files <- file.path(tmpdir, basename(src_files)) file.copy(src_files, files)  ## Both of the following extract the same tags: exif_read(files, tags = c(\"filename\", \"imagesize\")) exif_call(args = c(\"-n\", \"-j\", \"-q\", \"-filename\", \"-imagesize\"),           path = files)  ## Set value of a new \"Artist\" field in photo's metadata file1 <- files[1] exif_read(file1, tags = \"artist\") exif_call(path = file1, args = \"-Artist=me\") exif_read(file1, tags = \"artist\")  ## Remove all but a few essential fields length(exif_read(file1)) exif_call(path = file1, args = \"-all=\") length(exif_read(file1)) exif_read(file1)  ## Clean up unlink(files) }"},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read EXIF and other metadata from files — exif_read","title":"Read EXIF and other metadata from files — exif_read","text":"Reads EXIF metadata data.frame calling Phil Harvey's ExifTool command-line application.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read EXIF and other metadata from files — exif_read","text":"","code":"exif_read(   path,   tags = NULL,   recursive = FALSE,   args = NULL,   quiet = TRUE,   pipeline = c(\"json\", \"csv\") )"},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read EXIF and other metadata from files — exif_read","text":"path vector filenames. tags vector tags output. good idea specify reading large numbers files, decreases output overhead significantly. Spaces stripped output data frame. parameter case-sensitive. recursive TRUE pass \"-r\" option ExifTool. args Additional arguments. quiet Use FALSE display diagnostic information. Default value TRUE pipeline One \"json\" (default) \"csv\". Controls whether exiftool executable, behind scenes, extracts metadata JSON data structure tabular csv. JSON pipeline works well cases, (documented https://exiftool.org/exiftool_pod.html) properly handle non-UTF-8 character sets. metadata fields include characters encoded using UTF-8 need handled setting \"-charset\" option, use \"csv\" pipeline demonstrated second example .","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read EXIF and other metadata from files — exif_read","text":"data frame class \"exiftoolr\" one row per     file processed. first column, named \"SourceFile\" gives name(s) processed files. Subsequent columns     contain info tags read files. Note binary tags thumbnails loaded  base64-encoded     strings start \"base64:\". Although     truncated printed representation  data.frame returned function, left     unaltered data.frame .","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read EXIF and other metadata from files — exif_read","text":"ExifTool website: \"ExifTool platform-independent Perl library plus command-line application reading, writing editing meta information wide variety files. ExifTool supports many different metadata formats including EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, FlashPix, AFCP ID3, well maker notes many digital cameras Canon, Casio, DJI, FLIR, FujiFilm, GE, GoPro, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Motorola, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon Sony.\" information, see ExifTool website.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_read.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read EXIF and other metadata from files — exif_read","text":"https://exiftool.org","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/exif_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read EXIF and other metadata from files — exif_read","text":"","code":"if (FALSE) { files <- dir(system.file(package = \"exiftoolr\", \"images\"),              pattern = \"LaSals|Lizard\", full.names = TRUE) exif_read(files) exif_read(files, tags = c(\"filename\", \"imagesize\"))  ## Use pipeline=\"csv\" for images needing explicit specification ## and proper handling of a non-default character sets img_file <- system.file(package = \"exiftoolr\", \"images\", \"QS_Hongg.jpg\") args <- c(\"-charset\", \"exiftool=cp1250\") res <- exif_read(img_file, args = args, pipeline = \"csv\") res[[\"City\"]]  ## \"Zurich\", with an umlaut over the \"u\" }"},{"path":"https://joshobrien.github.io/exiftoolr/reference/install_exiftool.html","id":null,"dir":"Reference","previous_headings":"","what":"Install ExifTool, downloading (by default) the current\n    version — install_exiftool","title":"Install ExifTool, downloading (by default) the current\n    version — install_exiftool","text":"Install current version ExifTool","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/install_exiftool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install ExifTool, downloading (by default) the current\n    version — install_exiftool","text":"","code":"install_exiftool(   install_location = NULL,   win_exe = NULL,   local_exiftool = NULL,   quiet = FALSE )"},{"path":"https://joshobrien.github.io/exiftoolr/reference/install_exiftool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install ExifTool, downloading (by default) the current\n    version — install_exiftool","text":"install_location Path directory ExifTool installed. NULL (default), installation directory returned backports::R_user_dir(\"exiftoolr\"). win_exe Logical, used Windows machines. install standalone ExifTool Windows executable ExifTool Perl library?  (latter relies, execution, existing installation Perl present user's machine.)  set NULL (default), function installs Windows executable Windows machines Perl library operating systems. local_exiftool installing ExifTool local \"*.zip\" \".tar.gz\", supply path file character string. default value, `NULL`, function downloads ExifTool https://exiftool.org installs . quiet Logical.  function chatty?","code":""},{"path":"https://joshobrien.github.io/exiftoolr/reference/install_exiftool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install ExifTool, downloading (by default) the current\n    version — install_exiftool","text":"Called side effect","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-023","dir":"Changelog","previous_headings":"","what":"Version 0.2.3","title":"Version 0.2.3","text":"CRAN release: 2023-10-17 Adds arguments config_file= common_args= exif_call(). passed exiftool options -config -common_args respectively, neither supported due allowed -@ ARGFILE option used ‘behind scenes’ calls exif_call().","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-022","dir":"Changelog","previous_headings":"","what":"Version 0.2.2","title":"Version 0.2.2","text":"CRAN release: 2023-02-22 Fixes bug cause failure locate already-installed version ExifTool MacOS (possibly also *NIX OS’s). Thanks Courtney Meier bug report.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"CRAN release: 2022-10-04 Changes default location exiftool executable downloaded call install_exiftool(). Formerly, executable installed directory returned system.file(\"exiftool\", package = \"exiftoolr\"), always writable (, e.g., package installed admin shared library multi-user server, hence owned “root”). Now, executable default installed directory given backports::R_user_dir(), generally writable.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-018","dir":"Changelog","previous_headings":"","what":"Version 0.1.8","title":"Version 0.1.8","text":"CRAN release: 2022-06-09 Fixes issue caused configure_exiftoolr() (thus essentially exiftoolr functionality) fail Windows machines Perl installed location findable exiftoolr:::configure_perl(). Thanks Tom Yamashita reporting issue. Adds tests (using tinytest package).","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-017","dir":"Changelog","previous_headings":"","what":"Version 0.1.7","title":"Version 0.1.7","text":"CRAN release: 2021-11-18 Fixes issue cause configure_exiftoolr() fail path ExifTool executable user’s computer contained spaces. Now configure_exiftoolr() work even spaces path(s) user’s installation Perl /ExifTool executable library. Thanks Lafont Rapnouil Tristan reporting issue.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-016","dir":"Changelog","previous_headings":"","what":"Version 0.1.6","title":"Version 0.1.6","text":"CRAN release: 2021-11-06 Fixes problem likely affect Linux users (also others relying local installation Perl execute calls ExifTool), caused internal change exif_call() 0.1.5 system() system2(). Thanks Daniel Baumgartner bringing attention.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-015","dir":"Changelog","previous_headings":"","what":"Version 0.1.5","title":"Version 0.1.5","text":"CRAN release: 2020-11-09 Added pipeline option exif_read(), allows users direct exif executable output results csv rather json format. helpful use images whose metadata contains non-UTF-8-encoded characters. documented , ExifTool’s JSON output properly handle non-UTF-8 character sets. Setting pipeline=\"csv\" ensures non-UTF-8 character sets properly handled, demonstrated new example ?exif_read.","code":""},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-014","dir":"Changelog","previous_headings":"","what":"Version 0.1.4","title":"Version 0.1.4","text":"CRAN release: 2020-09-03 Fixed exif_read() now allow repeated elements args=. can necessary (take one example) user needs separately specify encoding used image file names tags respectively. Now, call like following works :","code":"exif_read(path = \"myimage.jpg\",            args = c(\"-charset\", \"exiftool=cp850\", \"-charset\", \"filename=cp1250\"))"},{"path":"https://joshobrien.github.io/exiftoolr/news/index.html","id":"version-011","dir":"Changelog","previous_headings":"","what":"Version 0.1.1","title":"Version 0.1.1","text":"CRAN release: 2018-09-12 Failure configure_exiftoolr() find local installation ExifTool now throws error rather just warning, preventing infinite recursion exif_read() exif_version().","code":""}]
